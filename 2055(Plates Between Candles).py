class Solution:
    # def platesBetweenCandles(self, s: str, queries: list[list[int]]) -> list[int]:
    #     start = -1
    #     count = []
    #     n = len(s)
    #     for end in range(n):
    #         if s[end] == '|':
    #             if start != -1:
    #                 count.append([start, end])
    #             start = end
    #
    #     nearest_candles = [n + 1 for _ in range(n)]
    #
    #     for i in range(count[0][0]):
    #         nearest_candles[i] = count[0][0]
    #
    #     for c in count:
    #         for i in range(c[0], c[1]):
    #             nearest_candles[i] = c[1]
    #
    #
    #
    #     ans = []
    #     for query in queries:
    #         if (query[0] == 0 and s[query[0]] == '|') or (query[0] != 0 and nearest_candles[query[0]] != nearest_candles[query[0] - 1]):
    #             i = query[0]
    #         else:
    #             i = nearest_candles[query[0]]
    #
    #         num_candles = 0
    #         while nearest_candles[i] <= query[1]:
    #             num_candles += nearest_candles[i] - i - 1
    #             i = nearest_candles[i]
    #         ans.append(num_candles)
    #
    #     return ans

    # 上面的写法超时，这类题可以使用前缀和方法 盘子数量也可以表示为 preSum_y - preSum_x 这样时间复杂度可以降为O(n+q)
    def platesBetweenCandles(self, s: str, queries: List[List[int]]) -> List[int]:
        n = len(s)
        preSum, sum = [0] * n, 0
        left, l = [0] * n, -1
        for i, ch in enumerate(s):
            if ch == '*':
                sum += 1
            else:
                l = i
            preSum[i] = sum
            left[i] = l

        right, r = [0] * n, -1
        for i in range(n - 1, -1, -1):
            if s[i] == '|':
                r = i
            right[i] = r

        ans = [0] * len(queries)
        for i, (x, y) in enumerate(queries):
            x, y = right[x], left[y]
            if x >= 0 and y >= 0 and x < y:
                ans[i] = preSum[y] - preSum[x]
        return ans


s = "**|*******************|**********************************************|************|*********|*****|*********************************************************************************************|***"
queries = [[31,96],[14,192],[0,180],[13,193],[12,192],[11,183],[12,189],[65,116],[55,160],[100,164],[6,183],[4,182],[15,183],[0,194],[37,63],[10,184],[0,183],[5,184],[8,185],[13,136],[6,192],[5,189],[13,183],[8,184],[15,188],[0,184],[9,191],[4,193],[61,83],[1,193],[10,194],[15,192],[13,184],[2,185],[11,190],[11,195],[14,188],[12,188],[94,116],[3,184],[0,189],[4,185],[12,193],[3,185],[1,181],[6,194],[0,185],[10,193],[5,187],[10,185],[12,182],[23,80],[10,191],[10,195],[13,189],[6,193],[5,183],[2,182],[14,181],[3,187],[9,187],[4,180],[5,190],[4,181],[7,184],[3,135],[6,189],[14,186],[5,195],[11,186],[8,186],[30,159],[11,192],[61,80],[3,181],[5,192],[10,187],[2,25],[9,194],[43,118],[2,189],[8,180],[15,193],[13,181],[14,182],[105,133],[8,195],[0,193],[13,192],[3,186],[1,189],[24,124],[0,181],[136,158],[11,193],[14,180],[11,180],[54,149],[8,191],[11,188],[4,188],[2,181],[5,188],[11,181],[43,175],[12,183],[0,186],[6,188],[0,191],[15,186],[8,187],[7,74],[3,180],[27,149],[73,153],[52,145],[9,188],[7,195],[14,193],[77,160],[0,187],[10,188],[4,187],[62,160],[13,190],[12,190],[5,191],[14,184],[9,186],[7,189],[131,148],[9,189],[159,179],[20,174],[13,180],[4,184],[0,192],[2,190],[0,195],[10,180],[9,182],[9,181],[11,194],[12,194],[5,185],[3,189],[118,160],[5,181],[14,122],[25,63],[11,189],[3,193],[31,176],[58,148],[9,183],[11,184],[35,181],[12,186],[14,190],[8,190],[15,194],[1,195],[4,194],[2,180],[9,190],[3,182],[15,181],[13,194],[6,182],[42,117],[4,186],[13,187],[25,103],[6,184],[5,180],[21,180],[1,187],[15,189],[6,180],[44,160],[8,182],[15,180],[10,182],[1,180],[7,185],[8,193]]
print(Solution().platesBetweenCandles(s, queries))
